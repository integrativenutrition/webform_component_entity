<?php
/**
 * @file
 */

function webform_component_entity_action_info() {
  return array(
    'webform_component_entity_add_to_webform' => array(
      'type' => 'webform_component',
      'label' => t('Add to Current Webform'),
      'configurable' => TRUE,
      'behavior' => array('view_property'),
      'triggers' => array('any'),
    ),
  );
}

function webform_component_entity_add_to_webform($entity, $context) {
  $node = node_load($context['current_webform_nid']);
  if($node && $entity) {
    $webform_component = (array) $entity;
    $webform_component['nid'] = $node->nid;
    $webform_component['pid'] = 0;
    $webform_component['extra'] = unserialize($webform_component['extra']);
    webform_component_insert($webform_component);
  }
}

function webform_component_entity_add_to_webform_form($context) {
  if (!isset($context['current_webform_nid'])) {
    $context['current_webform_nid'] = $context['view']->args[0];
  }

  $form['current_webform_nid'] = array(
    '#type' => 'value',
    '#value' => $context['current_webform_nid'],
  );

  return $form;
}

function webform_component_entity_add_to_webform_submit($form, $form_state) {
  $form_values = $form_state['values'];
  $params = array(
    'current_webform_nid' => $form_values['current_webform_nid'],
  );
  $form_state['build_info']['args']['0']->override_url = 'node/' . $form_values['current_webform_nid'] . '/webform';
  return $params;
}

/**
 * Implements hook_entity_info().
 */
function webform_component_entity_entity_info() {
  $info['webform_component'] = array(
    'label' => t('Webform Component Entity'),
    'controller class' => 'WebformComponentEntityController',
    'base table' => 'webform_component_entity',
    'module' => 'webform_component_entity',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'wcid',
      'bundle' => 'bundle'
    ),
    'bundle keys' => array(
      'bundle' => 'bundle',
    ),
    'static cache' => TRUE,
    'bundles' => array(
      'webform_component_entity' => array(
        'label' => 'Webform Component Entity',
        'admin' => array(
          'path' => 'admin/config/content/webform-component-entity',
          'access arguments' => array('administer webform_component_entity entities'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' =>  FALSE,
      ),
    )
  );

  return $info;
}

/**
 * Implements hook_permission().
 */
function webform_component_entity_permission() {
  $permissions = array(
    'administer webform_component_entity' =>  array(
      'title' => t('Administer webform_component_entity'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_views_api().
 */
function webform_component_entity_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'webform_component_entity') . '/views',
  );
}

function webform_component_entity_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'webform_component_edit_form' && arg(4) == 'new') {
    $entity = entity_get_controller('webform_component')->create();
    $form['basic_entity'] = array(
      '#type' => 'value',
      '#value' => $entity,
    );    
    $form['library'] = array(
      '#title' => t('Library'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#attributes' => array('class' => array('collapsible')),
    );
    $form['library']['save_for_future_use'] = array(
      '#title' => t('Saving for future use'),
      '#type' => 'checkbox',
      '#value' => 1,
    );
    $form['library']['entity_fields_container'] = array(
      '#type' => 'container',
      '#states' => array(
        'visible' => array(
          ':input[name="library[save_for_future_use]"]' => array(
            'checked' => TRUE,
          ),
        ),
      ),
    );
    field_attach_form('webform_component', $entity, $form, $form_state);
    $instances = field_info_instances('webform_component', 'webform_component_entity');
    foreach($instances as $field_name => $instance) {
      $form['library']['entity_fields_container'][$field_name] = $form[$field_name];
      unset($form[$field_name]);
    }    
    $form['#submit'][] = 'webform_component_entity_form_alter_submit';
  }
  if ($form_id == 'webform_components_form') {
    $node_id = isset($form['#node']) ? $form['#node']->nid : 0;
    $form['add_from_library'] = array(
      '#markup' => '<a href="' . base_path() . 'node/' . $node_id . '/webform/add-from-library" value="Add from library" class="form-submit form-reset" style="float: right;">Add from Library</a>',
    );
  }  
}

function webform_component_entity_form_alter_submit(&$form, &$form_state) {
  $values = $form_state['values'];
  if ($values['library']['save_for_future_use']) {
    $entity = $values['basic_entity'];
    $entity->name = isset($values['name']) ? $values['name'] : '';
    $entity->form_key = isset($values['form_key']) ? $values['form_key'] : '';
    $entity->type = isset($values['type']) ? $values['type'] : '';
    $entity->value = isset($values['value']) ? $values['value'] : '';
    $entity->extra = isset($values['extra']) ? serialize($values['extra']) : array();
    $entity->mandatory = isset($values['mandatory']) ? $values['mandatory'] : 0;
    $entity->weight = isset($values['weight']) ? $values['weight'] : 0;
    $instances = field_info_instances('webform_component', 'webform_component_entity');
    foreach($instances as $field_name => $instance) {
      $form_state['values'][$field_name] = $form_state['values']['library']['entity_fields_container'][$field_name];
    }
    field_attach_submit('webform_component', $entity, $form, $form_state);
    $entity = webform_component_entity_save($entity);    
  }
}

function webform_component_entity_load($wcid = NULL, $reset = FALSE) {
  $wcids = (isset($wcid) ? array($wcid) : array());
  $basic = webform_component_entity_load_multiple($wcids, array(), $reset);
  return $basic ? reset($basic) : FALSE;
}

function webform_component_entity_load_multiple($wcids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('webform_component', $wcids, $conditions, $reset);
}

function webform_component_entity_save(&$entity) {
  return entity_get_controller('webform_component')->save($entity);
}
