<?php

/**
 * @file
 */

/**
 * Implements hook_views_api().
 */
function webform_component_entity_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'webform_component_entity') . '/views',
  );
}

function webform_component_entity_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'webform_component_edit_form' && arg(4) == 'new') {
    $form['library'] = array(
      '#title' => t('Library'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#attributes' => array('class' => array('collapsible')),
      '#weight' => 0,
    );
    $form['library']['save_for_future_use'] = array(
      '#title' => t('Saving for future use'),
      '#type' => 'checkbox',
      '#value' => 1,
    );
    $form['library']['entity_fields_container'] = array(
      '#type' => 'container',
      '#states' => array(
        'visible' => array(
          ':input[name="library[save_for_future_use]"]' => array(
            'checked' => TRUE,
          ),
        ),
      ),
    );
    /*
    $instances = field_info_instances('component_entity', 'component_entity');
    foreach($instances as $field_name => $instance) {
      $form['library']['entity_fields_container'][$field_name] = array(
        '#type' => 'textfield',
        '#title' => $instance['label'],
        '#value' => '',
      );
    }
     * 
     */
    $entity = entity_get_controller('webform_component')->create();
    $form['basic_entity'] = array(
      '#type' => 'value',
      '#value' => $entity,
    );    
    field_attach_form('webform_component', $entity, $form, $form_state);    
    $form['#submit'][] = 'webform_component_entity_form_alter_submit';
  } 
}

function webform_component_entity_form_alter_submit(&$form, &$form_state) {
  $values = $form_state['values'];
  if ($values['library']['save_for_future_use']) {
    $entity = $values['basic_entity'];
	$entity->name = isset($values['name']) ? $values['name'] : '';
	$entity->form_key = isset($values['form_key']) ? $values['form_key'] : '';
	$entity->type = isset($values['type']) ? $values['type'] : '';
	$entity->value = isset($values['value']) ? $values['value'] : '';
	$entity->extra = isset($values['extra']) ? serialize($values['extra']) : array();
	$entity->mandatory = isset($values['mandatory']) ? $values['mandatory'] : 0;
	$entity->weight = isset($values['weight']) ? $values['weight'] : 0;
    field_attach_submit('webform_component', $entity, $form, $form_state);
    $entity = webform_component_entity_save($entity);    
  }
}

function webform_component_entity_entity_info() {
  $info['webform_component'] = array(
    'label' => t('Webform Component Entity'),
    'controller class' => 'WebformComponentEntityController',
    'base table' => 'webform_component_entity',
    'uri callback' => 'webform_component_entity_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'wcid',
      'bundle' => 'bundle'
    ),
    'bundle keys' => array(
      'bundle' => 'bundle',
    ),
    'static cache' => TRUE,
    'bundles' => array(
      'webform_component_entity' => array(
        'label' => 'First example bundle',
        'admin' => array(
          'path' => 'admin/structure/webform_component_entity',
          'access arguments' => array('administer webform_component_entity entities'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' =>  FALSE,
      ),
    )
  );

  return $info;
}

function webform_component_entity_load($wcid = NULL, $reset = FALSE) {
  $wcids = (isset($wcid) ? array($wcid) : array());
  $basic = webform_component_entity_load_multiple($wcids, array(), $reset);
  return $basic ? reset($basic) : FALSE;
}

function webform_component_entity_load_multiple($wcids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('webform_component', $wcids, $conditions, $reset);
}

function webform_component_entity_uri($basic) {
  return array(
    'path' => 'examples/webform_component_entity/basic/' . $basic->wcid,
  );
}

function webform_component_entity_menu() {
  $items['admin/structure/webform_component_entity'] = array(
    'title' => 'Administer webform_component_entity entity type',
    'page callback' => 'webform_component_entity_list_entities',
    'access arguments' => array('administer webform_component_entity entities'),
  );

  $items['admin/structure/webform_component_entity/add'] = array(
    'title' => 'Add an Entity Webform Component Entity',
    'page callback' => 'webform_component_entity_add',
    'access arguments' => array('create webform_component_entity entities'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/structure/webform_component_entity/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['node/%webform_menu/webform/add-from-library'] = array(
    'title' => t('Add from library'),
    'page callback' => 'webform_component_entity_add_from_library',
    'page arguments' => array(1),
    'access arguments' => array('administer webform_component_entity entities'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

function webform_component_entity_add_from_library($node){
  if(empty($_POST)) {
    variable_set('webform_component_entity_webform_page', base_path() . 'node/' . $node->nid . '/webform/add-from-library');
	
	// add all webform component entities to webform components 
	$wcid_results = db_query("SELECT wcid from {webform_component_entity}");
    foreach($wcid_results as $wcid)
    {
      $webform_component_entity_result = db_query("SELECT name, form_key, type, value, extra, mandatory, weight from {webform_component_entity} WHERE wcid = :wcid", array(':wcid'=>$wcid->wcid));
      foreach($webform_component_entity_result as $webform_component_entity) {
        $webform_component_entity = (array) $webform_component_entity;
        $webform_component_entity['nid'] = $node->nid;
        $webform_component_entity['pid'] = 0;
        $webform_component_entity['extra'] = unserialize($webform_component_entity['extra']);
        webform_component_insert($webform_component_entity);
      }
      drupal_set_message(t('New component %name added.', array('%name' => $webform_component_entity['name'])));
    }
    drupal_goto('node/' . $node->nid . '/webform/components');
    drupal_goto('admin/structure/webform_component_entity');
  }
  elseif(isset($_POST['wcids'])) {
    variable_del('component_entity_webform_page');
    webform_ensure_record($node);
    $wcids = $_POST['wcids'];
    foreach($wcids as $wcid)
    {
      $webform_component_entity_result = db_query("SELECT name, form_key, type, value, extra, mandatory, weight from {webform_component_entity} WHERE wcid = :wcid", array(':wcid'=>$wcid));
      foreach($webform_component_entity_result as $webform_component_entity) {
        $webform_component_entity = (array) $webform_component_entity;
        $webform_component_entity['nid'] = $node->nid;
        $webform_component_entity['pid'] = 0;
        $webform_component_entity['extra'] = unserialize($webform_component_entity['extra']);
        webform_component_insert($webform_component_entity);
      }
      drupal_set_message(t('New component %name added.', array('%name' => $webform_component_entity['name'])));
    }
    drupal_goto('node/' . $node->nid . '/webform/components');
  }
}

function webform_component_entity_info_page() {
  $content['preface'] = array(
    '#type' => 'item',
    '#markup' => t('The entity example provides a simple example entity.')
  );
  if (user_access('administer webform_component_entity entities')) {
    $content['preface']['#markup'] =  t('You can administer these and add fields and change the view !link.',
      array('!link' => l(t('here'), 'admin/structure/webform_component_entity/manage'))
    );
  }
  $content['table'] = webform_component_entity_list_entities();

  return $content;
}

function webform_component_entity_permission() {
  $permissions = array(
    'administer webform_component_entity entities' =>  array(
      'title' => t('Administer webform_component_entity entities'),
    ),
    'view any webform_component_entity entity' => array(
      'title' => t('View any Entity Example Basic entity'),
    ),
    'edit any webform_component_entity entity' => array(
      'title' => t('Edit any Entity Example Basic entity'),
    ),
    'create webform_component_entity entities' => array(
      'title' => t('Create Entity Example Basic Entities'),
    ),
  );
  return $permissions;
}

function webform_component_entity_list_entities() {
  $content = array();
  $entities = webform_component_entity_load_multiple();
  if (!empty($entities)) {
    foreach ( $entities as $entity ) {
      $rows[] = array(
        'data' => array(
          'id' => $entity->wcid,
          'bundle' => $entity->type,
        ),
      );
    }
    $content['entity_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => array(t('ID'), t('Bundle')),
    );
  }
  else {
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No webform_component_entity entities currently exist.'),
    );
  }
  return $content;
}

function webform_component_entity_title($entity) {
  return t('');
}

function webform_component_entity_view($entity, $view_mode = 'tweaky') {
  $entity_type = 'webform_component_entity';
  $entity->content = array(
    '#view_mode' => $view_mode,
  );

  field_attach_prepare_view($entity_type, array($entity->wcid => $entity), $view_mode);
  entity_prepare_view($entity_type, array($entity->wcid => $entity));
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);
  global $language;
  $langcode = $language->language;
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode, $langcode);
  drupal_alter(array('webform_component_entity_view', 'entity_view'),
    $entity->content, $entity_type);
  return $entity->content;
}

function webform_component_entity_add() {
  $entity = entity_get_controller('webform_component')->create();
  return drupal_get_form('webform_component_entity_form', $entity);
}

function webform_component_entity_form($form, &$form_state, $entity) {
  $form['basic_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );
  field_attach_form('webform_component', $entity, $form, $form_state);
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('webform_component_entity_edit_delete'),
    '#weight' => 200,
  );

  return $form;
}

function webform_component_entity_form_validate($form, &$form_state) {
  field_attach_form_validate('webform_component', $form_state['values']['basic_entity'], $form, $form_state);
}

function webform_component_entity_form_submit($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  field_attach_submit('webform_component', $entity, $form, $form_state);
  $entity = webform_component_entity_save($entity);
  $form_state['redirect'] = 'admin/structure/webform_component_entity/manage';
}

function webform_component_entity_edit_delete( $form , &$form_state ) {
  $entity = $form_state['values']['basic_entity'];
  webform_component_entity_delete($entity);
  drupal_set_message(t('The entity ID %id has been deleted',
    array('%id' => $entity->wcid))
  );
  $form_state['redirect'] = 'admin/structure/webform_component_entity';
}

function webform_component_entity_save(&$entity) {
  return entity_get_controller('webform_component')->save($entity);
}

function webform_component_entity_delete($entity) {
  entity_get_controller('webform_component')->delete($entity);
}
