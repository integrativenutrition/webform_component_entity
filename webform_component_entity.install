<?php
/**
 * @file
 */

/**
 * Implements hook_schema().
 */
function webform_component_entity_schema() {
  $schema = array();
  $schema['webform_component_entity'] = drupal_get_schema_unprocessed('webform', 'webform_component');
  $schema['webform_component_entity']['fields']['wcid'] = array(
    'description' => 'Primary Key: The identifier for a webform component entity.',
    'type' => 'serial',
    'unsigned' => TRUE,
    'not null' => TRUE,
  );
  $schema['webform_component_entity']['fields']['bundle'] = array(
    'description' => 'The {component_entity_type}.type of this component_entity.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  );
  $schema['webform_component_entity']['primary key'] = array('wcid');
  $schema['webform_component_entity']['indexes'] = array(
    'type' => array('bundle'),
  );
  unset($schema['webform_component_entity']['fields']['nid']);
  unset($schema['webform_component_entity']['fields']['cid']);
  unset($schema['webform_component_entity']['fields']['pid']);
  return $schema;
}


/*
 * Implements hook_uninstall().
 */
function webform_component_entity_uninstall() {
  // Delete bundle
  field_attach_delete_bundle('webform_component_entity' , 'webform_component_entity' );
  
  // Delete fields and all its instance
  $field_tags = field_info_field('field_component_tags');
  if (!empty($field_tags)) {
	field_delete_field('field_component_tags');
  }
  
  $field_sample_additional = field_info_field('field_sample_additional');
  if (!empty($field_sample_additional)) {
	field_delete_field('field_sample_additional');
  }
  
  // Delete vocabulary
  $vocabulary = taxonomy_vocabulary_machine_name_load('component_tags');
  if (!empty($vocabulary)) {
    taxonomy_vocabulary_delete($vocabulary->vid);
  }
}

function webform_component_entity_install() {
  $vocabulary = taxonomy_vocabulary_machine_name_load('component_tags');
  if (!$vocabulary) {
    $edit = array(
      'name' => t("Component Tags"),
      'machine_name' => 'component_tags',
      'hierarchy' => 1,
      'module' => 'webform_component_entity',
    );
    $vocabulary = (object) $edit;
    taxonomy_vocabulary_save($vocabulary);
  }
  
  $field_tags_info_field = field_read_field('field_component_tags');
  if (empty($field_tags_info_field)) {
    $field = array(
      'field_name' => 'field_component_tags',
      'type' => 'taxonomy_term_reference',
      'cardinality' => 1,
      'settings' => array(
        'cardinality' => -1,
        'allowed_values' => array(
          array(
            'vocabulary' => $vocabulary->machine_name,
            'parent' => 0,
          ),
        ),
      ),
    );
    field_create_field($field);
  }
  
  $field_tags_info_instance = field_read_instance('webform_component', 'field_component_tags', 'webform_component_entity');
  if (empty($field_tags_info_instance)) {
    $instance = array(
      'field_name' => 'field_component_tags',
      'entity_type' => 'webform_component',
      'label' => $vocabulary->name,
      'bundle' => 'webform_component_entity',
      'required' => FALSE,
      'widget' => array(
        'type' => 'taxonomy_autocomplete',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
          'weight' => 10,
        ),
        'teaser' => array(
          'type' => 'hidden',
          'weight' => 10,
        ),
      ),
    );
    field_create_instance($instance);
  }
  
  $field_sample_additional_info_field = field_read_field('field_sample_additional');
  if (empty($field_sample_additional_info_field)) {
    $field = array(
      'field_name' => 'field_sample_additional',
      'type' => 'text',
      'cardinality' => 1,
    );
    field_create_field($field);
  }
  
  $field_sample_additional_info_instance = field_read_instance('webform_component', 'field_sample_additional', 'webform_component_entity');
  if (empty($field_sample_additional_info_instance)) {
    $instance = array(
      'field_name' => 'field_sample_additional',
      'entity_type' => 'webform_component',
      'bundle' => 'webform_component_entity',
      'label' => t("Sample Additional Field"),
      'widget' => array(
        'type' => 'text',
        'weight' => 60,
      ),
      'settings' => array('display_summary' => FALSE),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'text_default',
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'text_default',
        ),
      ),
    );  
    field_create_instance($instance);
  }
}
